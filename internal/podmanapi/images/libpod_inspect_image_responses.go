// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LibpodInspectImageReader is a Reader for the LibpodInspectImage structure.
type LibpodInspectImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LibpodInspectImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLibpodInspectImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewLibpodInspectImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLibpodInspectImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLibpodInspectImageOK creates a LibpodInspectImageOK with default headers values
func NewLibpodInspectImageOK() *LibpodInspectImageOK {
	return &LibpodInspectImageOK{}
}

/* LibpodInspectImageOK describes a response with status code 200, with default header values.

Inspect image
*/
type LibpodInspectImageOK struct {
	Payload *LibpodInspectImageOKBody
}

func (o *LibpodInspectImageOK) Error() string {
	return fmt.Sprintf("[GET /libpod/images/{name:.*}/json][%d] libpodInspectImageOK  %+v", 200, o.Payload)
}
func (o *LibpodInspectImageOK) GetPayload() *LibpodInspectImageOKBody {
	return o.Payload
}

func (o *LibpodInspectImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodInspectImageOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibpodInspectImageNotFound creates a LibpodInspectImageNotFound with default headers values
func NewLibpodInspectImageNotFound() *LibpodInspectImageNotFound {
	return &LibpodInspectImageNotFound{}
}

/* LibpodInspectImageNotFound describes a response with status code 404, with default header values.

No such image
*/
type LibpodInspectImageNotFound struct {
	Payload *LibpodInspectImageNotFoundBody
}

func (o *LibpodInspectImageNotFound) Error() string {
	return fmt.Sprintf("[GET /libpod/images/{name:.*}/json][%d] libpodInspectImageNotFound  %+v", 404, o.Payload)
}
func (o *LibpodInspectImageNotFound) GetPayload() *LibpodInspectImageNotFoundBody {
	return o.Payload
}

func (o *LibpodInspectImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodInspectImageNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibpodInspectImageInternalServerError creates a LibpodInspectImageInternalServerError with default headers values
func NewLibpodInspectImageInternalServerError() *LibpodInspectImageInternalServerError {
	return &LibpodInspectImageInternalServerError{}
}

/* LibpodInspectImageInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type LibpodInspectImageInternalServerError struct {
	Payload *LibpodInspectImageInternalServerErrorBody
}

func (o *LibpodInspectImageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /libpod/images/{name:.*}/json][%d] libpodInspectImageInternalServerError  %+v", 500, o.Payload)
}
func (o *LibpodInspectImageInternalServerError) GetPayload() *LibpodInspectImageInternalServerErrorBody {
	return o.Payload
}

func (o *LibpodInspectImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodInspectImageInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LibpodInspectImageInternalServerErrorBody libpod inspect image internal server error body
swagger:model LibpodInspectImageInternalServerErrorBody
*/
type LibpodInspectImageInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod inspect image internal server error body
func (o *LibpodInspectImageInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod inspect image internal server error body based on context it is used
func (o *LibpodInspectImageInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodInspectImageInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodInspectImageInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res LibpodInspectImageInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodInspectImageNotFoundBody libpod inspect image not found body
swagger:model LibpodInspectImageNotFoundBody
*/
type LibpodInspectImageNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod inspect image not found body
func (o *LibpodInspectImageNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod inspect image not found body based on context it is used
func (o *LibpodInspectImageNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodInspectImageNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodInspectImageNotFoundBody) UnmarshalBinary(b []byte) error {
	var res LibpodInspectImageNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodInspectImageOKBody libpod inspect image o k body
swagger:model LibpodInspectImageOKBody
*/
type LibpodInspectImageOKBody struct {

	// annotations
	Annotations map[string]string `json:"Annotations,omitempty"`

	// architecture
	Architecture string `json:"Architecture,omitempty"`

	// author
	Author string `json:"Author,omitempty"`

	// comment
	Comment string `json:"Comment,omitempty"`

	// config
	Config *LibpodInspectImageOKBodyConfig `json:"Config,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"Created,omitempty"`

	// Digest allows simple protection of hex formatted digest strings, prefixed
	// by their algorithm. Strings of type Digest have some guarantee of being in
	// the correct format and it provides quick access to the components of a
	// digest string.
	//
	// The following is an example of the contents of Digest types:
	//
	// sha256:7173b809ca12ec5dee4506cd86be934c4596dd234ee82c0662eac04a8c2c71dc
	//
	// This allows to abstract the digest behind this type and work only in those
	// terms.
	Digest string `json:"Digest,omitempty"`

	// graph driver
	GraphDriver *LibpodInspectImageOKBodyGraphDriver `json:"GraphDriver,omitempty"`

	// healthcheck
	Healthcheck *LibpodInspectImageOKBodyHealthcheck `json:"Healthcheck,omitempty"`

	// history
	History []*LibpodInspectImageOKBodyHistoryItems0 `json:"History"`

	// ID
	ID string `json:"Id,omitempty"`

	// labels
	Labels map[string]string `json:"Labels,omitempty"`

	// manifest type
	ManifestType string `json:"ManifestType,omitempty"`

	// names history
	NamesHistory []string `json:"NamesHistory"`

	// os
	Os string `json:"Os,omitempty"`

	// parent
	Parent string `json:"Parent,omitempty"`

	// repo digests
	RepoDigests []string `json:"RepoDigests"`

	// repo tags
	RepoTags []string `json:"RepoTags"`

	// root f s
	RootFS *LibpodInspectImageOKBodyRootFS `json:"RootFS,omitempty"`

	// size
	Size int64 `json:"Size,omitempty"`

	// user
	User string `json:"User,omitempty"`

	// version
	Version string `json:"Version,omitempty"`

	// virtual size
	VirtualSize int64 `json:"VirtualSize,omitempty"`
}

// Validate validates this libpod inspect image o k body
func (o *LibpodInspectImageOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGraphDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHealthcheck(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRootFS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LibpodInspectImageOKBody) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.Config) { // not required
		return nil
	}

	if o.Config != nil {
		if err := o.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodInspectImageOK" + "." + "Config")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodInspectImageOKBody) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("libpodInspectImageOK"+"."+"Created", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *LibpodInspectImageOKBody) validateGraphDriver(formats strfmt.Registry) error {
	if swag.IsZero(o.GraphDriver) { // not required
		return nil
	}

	if o.GraphDriver != nil {
		if err := o.GraphDriver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodInspectImageOK" + "." + "GraphDriver")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodInspectImageOKBody) validateHealthcheck(formats strfmt.Registry) error {
	if swag.IsZero(o.Healthcheck) { // not required
		return nil
	}

	if o.Healthcheck != nil {
		if err := o.Healthcheck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodInspectImageOK" + "." + "Healthcheck")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodInspectImageOKBody) validateHistory(formats strfmt.Registry) error {
	if swag.IsZero(o.History) { // not required
		return nil
	}

	for i := 0; i < len(o.History); i++ {
		if swag.IsZero(o.History[i]) { // not required
			continue
		}

		if o.History[i] != nil {
			if err := o.History[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("libpodInspectImageOK" + "." + "History" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *LibpodInspectImageOKBody) validateRootFS(formats strfmt.Registry) error {
	if swag.IsZero(o.RootFS) { // not required
		return nil
	}

	if o.RootFS != nil {
		if err := o.RootFS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodInspectImageOK" + "." + "RootFS")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this libpod inspect image o k body based on the context it is used
func (o *LibpodInspectImageOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateGraphDriver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHealthcheck(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRootFS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LibpodInspectImageOKBody) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.Config != nil {
		if err := o.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodInspectImageOK" + "." + "Config")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodInspectImageOKBody) contextValidateGraphDriver(ctx context.Context, formats strfmt.Registry) error {

	if o.GraphDriver != nil {
		if err := o.GraphDriver.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodInspectImageOK" + "." + "GraphDriver")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodInspectImageOKBody) contextValidateHealthcheck(ctx context.Context, formats strfmt.Registry) error {

	if o.Healthcheck != nil {
		if err := o.Healthcheck.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodInspectImageOK" + "." + "Healthcheck")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodInspectImageOKBody) contextValidateHistory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.History); i++ {

		if o.History[i] != nil {
			if err := o.History[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("libpodInspectImageOK" + "." + "History" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *LibpodInspectImageOKBody) contextValidateRootFS(ctx context.Context, formats strfmt.Registry) error {

	if o.RootFS != nil {
		if err := o.RootFS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodInspectImageOK" + "." + "RootFS")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LibpodInspectImageOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodInspectImageOKBody) UnmarshalBinary(b []byte) error {
	var res LibpodInspectImageOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodInspectImageOKBodyConfig ImageConfig defines the execution parameters which should be used as a base when running a container using an image.
swagger:model LibpodInspectImageOKBodyConfig
*/
type LibpodInspectImageOKBodyConfig struct {

	// Cmd defines the default arguments to the entrypoint of the container.
	Cmd []string `json:"Cmd"`

	// Entrypoint defines a list of arguments to use as the command to execute when the container starts.
	Entrypoint []string `json:"Entrypoint"`

	// Env is a list of environment variables to be used in a container.
	Env []string `json:"Env"`

	// ExposedPorts a set of ports to expose from a container running this image.
	ExposedPorts map[string]interface{} `json:"ExposedPorts,omitempty"`

	// Labels contains arbitrary metadata for the container.
	Labels map[string]string `json:"Labels,omitempty"`

	// StopSignal contains the system call signal that will be sent to the container to exit.
	StopSignal string `json:"StopSignal,omitempty"`

	// User defines the username or UID which the process in the container should run as.
	User string `json:"User,omitempty"`

	// Volumes is a set of directories describing where the process is likely write data specific to a container instance.
	Volumes map[string]interface{} `json:"Volumes,omitempty"`

	// WorkingDir sets the current working directory of the entrypoint process in the container.
	WorkingDir string `json:"WorkingDir,omitempty"`
}

// Validate validates this libpod inspect image o k body config
func (o *LibpodInspectImageOKBodyConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod inspect image o k body config based on context it is used
func (o *LibpodInspectImageOKBodyConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodInspectImageOKBodyConfig) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodInspectImageOKBodyConfig) UnmarshalBinary(b []byte) error {
	var res LibpodInspectImageOKBodyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodInspectImageOKBodyGraphDriver Data handles the data for a storage driver
swagger:model LibpodInspectImageOKBodyGraphDriver
*/
type LibpodInspectImageOKBodyGraphDriver struct {

	// data
	Data map[string]string `json:"Data,omitempty"`

	// name
	Name string `json:"Name,omitempty"`
}

// Validate validates this libpod inspect image o k body graph driver
func (o *LibpodInspectImageOKBodyGraphDriver) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod inspect image o k body graph driver based on context it is used
func (o *LibpodInspectImageOKBodyGraphDriver) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodInspectImageOKBodyGraphDriver) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodInspectImageOKBodyGraphDriver) UnmarshalBinary(b []byte) error {
	var res LibpodInspectImageOKBodyGraphDriver
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodInspectImageOKBodyHealthcheck Schema2HealthConfig is a HealthConfig, which holds configuration settings
// for the HEALTHCHECK feature, from docker/docker/api/types/container.
swagger:model LibpodInspectImageOKBodyHealthcheck
*/
type LibpodInspectImageOKBodyHealthcheck struct {

	// Retries is the number of consecutive failures needed to consider a container as unhealthy.
	// Zero means inherit.
	Retries int64 `json:"Retries,omitempty"`

	// Test is the test to perform to check that the container is healthy.
	// An empty slice means to inherit the default.
	// The options are:
	// {} : inherit healthcheck
	// {"NONE"} : disable healthcheck
	// {"CMD", args...} : exec arguments directly
	// {"CMD-SHELL", command} : run command with system's default shell
	Test []string `json:"Test"`

	// A Duration represents the elapsed time between two instants
	// as an int64 nanosecond count. The representation limits the
	// largest representable duration to approximately 290 years.
	Interval int64 `json:"Interval,omitempty"`

	// A Duration represents the elapsed time between two instants
	// as an int64 nanosecond count. The representation limits the
	// largest representable duration to approximately 290 years.
	StartPeriod int64 `json:"StartPeriod,omitempty"`

	// A Duration represents the elapsed time between two instants
	// as an int64 nanosecond count. The representation limits the
	// largest representable duration to approximately 290 years.
	Timeout int64 `json:"Timeout,omitempty"`
}

// Validate validates this libpod inspect image o k body healthcheck
func (o *LibpodInspectImageOKBodyHealthcheck) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod inspect image o k body healthcheck based on context it is used
func (o *LibpodInspectImageOKBodyHealthcheck) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodInspectImageOKBodyHealthcheck) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodInspectImageOKBodyHealthcheck) UnmarshalBinary(b []byte) error {
	var res LibpodInspectImageOKBodyHealthcheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodInspectImageOKBodyHistoryItems0 History describes the history of a layer.
swagger:model LibpodInspectImageOKBodyHistoryItems0
*/
type LibpodInspectImageOKBodyHistoryItems0 struct {

	// Author is the author of the build point.
	Author string `json:"author,omitempty"`

	// Comment is a custom message set when creating the layer.
	Comment string `json:"comment,omitempty"`

	// Created is the combined date and time at which the layer was created, formatted as defined by RFC 3339, section 5.6.
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// CreatedBy is the command which created the layer.
	CreatedBy string `json:"created_by,omitempty"`

	// EmptyLayer is used to mark if the history item created a filesystem diff.
	EmptyLayer bool `json:"empty_layer,omitempty"`
}

// Validate validates this libpod inspect image o k body history items0
func (o *LibpodInspectImageOKBodyHistoryItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LibpodInspectImageOKBodyHistoryItems0) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this libpod inspect image o k body history items0 based on context it is used
func (o *LibpodInspectImageOKBodyHistoryItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodInspectImageOKBodyHistoryItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodInspectImageOKBodyHistoryItems0) UnmarshalBinary(b []byte) error {
	var res LibpodInspectImageOKBodyHistoryItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodInspectImageOKBodyRootFS RootFS holds the root fs information of an image
swagger:model LibpodInspectImageOKBodyRootFS
*/
type LibpodInspectImageOKBodyRootFS struct {

	// layers
	Layers []string `json:"Layers"`

	// type
	Type string `json:"Type,omitempty"`
}

// Validate validates this libpod inspect image o k body root f s
func (o *LibpodInspectImageOKBodyRootFS) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod inspect image o k body root f s based on context it is used
func (o *LibpodInspectImageOKBodyRootFS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodInspectImageOKBodyRootFS) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodInspectImageOKBodyRootFS) UnmarshalBinary(b []byte) error {
	var res LibpodInspectImageOKBodyRootFS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

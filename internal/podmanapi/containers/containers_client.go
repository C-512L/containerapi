// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new containers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for containers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ChangesContainer(params *ChangesContainerParams, opts ...ClientOption) (*ChangesContainerOK, error)

	LibpodAttachContainer(params *LibpodAttachContainerParams, opts ...ClientOption) error

	LibpodCheckpointContainer(params *LibpodCheckpointContainerParams, opts ...ClientOption) (*LibpodCheckpointContainerOK, error)

	LibpodCommitContainer(params *LibpodCommitContainerParams, opts ...ClientOption) (*LibpodCommitContainerCreated, error)

	LibpodContainerExists(params *LibpodContainerExistsParams, opts ...ClientOption) (*LibpodContainerExistsNoContent, error)

	LibpodCreateContainer(params *LibpodCreateContainerParams, opts ...ClientOption) (*LibpodCreateContainerCreated, error)

	LibpodExportContainer(params *LibpodExportContainerParams, opts ...ClientOption) (*LibpodExportContainerOK, error)

	LibpodGenerateKube(params *LibpodGenerateKubeParams, writer io.Writer, opts ...ClientOption) (*LibpodGenerateKubeOK, error)

	LibpodGetContainer(params *LibpodGetContainerParams, opts ...ClientOption) (*LibpodGetContainerOK, error)

	LibpodInitContainer(params *LibpodInitContainerParams, opts ...ClientOption) (*LibpodInitContainerNoContent, error)

	LibpodKillContainer(params *LibpodKillContainerParams, opts ...ClientOption) (*LibpodKillContainerNoContent, error)

	LibpodListContainers(params *LibpodListContainersParams, opts ...ClientOption) (*LibpodListContainersOK, error)

	LibpodLogsFromContainer(params *LibpodLogsFromContainerParams, writer io.Writer, opts ...ClientOption) (*LibpodLogsFromContainerOK, error)

	LibpodMountContainer(params *LibpodMountContainerParams, opts ...ClientOption) (*LibpodMountContainerOK, error)

	LibpodPauseContainer(params *LibpodPauseContainerParams, opts ...ClientOption) (*LibpodPauseContainerNoContent, error)

	LibpodPlayKube(params *LibpodPlayKubeParams, opts ...ClientOption) (*LibpodPlayKubeOK, error)

	LibpodPruneContainers(params *LibpodPruneContainersParams, opts ...ClientOption) (*LibpodPruneContainersOK, error)

	LibpodPutArchive(params *LibpodPutArchiveParams, opts ...ClientOption) (*LibpodPutArchiveOK, error)

	LibpodRemoveContainer(params *LibpodRemoveContainerParams, opts ...ClientOption) (*LibpodRemoveContainerNoContent, error)

	LibpodResizeContainer(params *LibpodResizeContainerParams, opts ...ClientOption) (*LibpodResizeContainerOK, error)

	LibpodRestartContainer(params *LibpodRestartContainerParams, opts ...ClientOption) (*LibpodRestartContainerNoContent, error)

	LibpodRestoreContainer(params *LibpodRestoreContainerParams, opts ...ClientOption) (*LibpodRestoreContainerOK, error)

	LibpodRunHealthCheck(params *LibpodRunHealthCheckParams, opts ...ClientOption) (*LibpodRunHealthCheckOK, error)

	LibpodShowMountedContainers(params *LibpodShowMountedContainersParams, opts ...ClientOption) (*LibpodShowMountedContainersOK, error)

	LibpodStartContainer(params *LibpodStartContainerParams, opts ...ClientOption) (*LibpodStartContainerNoContent, error)

	LibpodStatsContainer(params *LibpodStatsContainerParams, opts ...ClientOption) (*LibpodStatsContainerOK, error)

	LibpodStopContainer(params *LibpodStopContainerParams, opts ...ClientOption) (*LibpodStopContainerNoContent, error)

	LibpodTopContainer(params *LibpodTopContainerParams, opts ...ClientOption) (*LibpodTopContainerOK, error)

	LibpodUnmountContainer(params *LibpodUnmountContainerParams, opts ...ClientOption) (*LibpodUnmountContainerNoContent, error)

	LibpodUnpauseContainer(params *LibpodUnpauseContainerParams, opts ...ClientOption) (*LibpodUnpauseContainerNoContent, error)

	LibpodWaitContainer(params *LibpodWaitContainerParams, opts ...ClientOption) (*LibpodWaitContainerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChangesContainer reports on changes to container s filesystem adds deletes or modifications

  Returns which files in a container's filesystem have been added, deleted, or modified. The Kind of modification can be one of:

0: Modified
1: Added
2: Deleted

*/
func (a *Client) ChangesContainer(params *ChangesContainerParams, opts ...ClientOption) (*ChangesContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangesContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changesContainer",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/changes",
		ProducesMediaTypes: []string{"application/json", "text/html", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangesContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangesContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changesContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodAttachContainer attaches to a container

  Hijacks the connection to forward the container's standard streams to the client.
*/
func (a *Client) LibpodAttachContainer(params *LibpodAttachContainerParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodAttachContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodAttachContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodAttachContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  LibpodCheckpointContainer checkpoints a container
*/
func (a *Client) LibpodCheckpointContainer(params *LibpodCheckpointContainerParams, opts ...ClientOption) (*LibpodCheckpointContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodCheckpointContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodCheckpointContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/checkpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodCheckpointContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodCheckpointContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodCheckpointContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodCommitContainer commits

  Create a new image from a container
*/
func (a *Client) LibpodCommitContainer(params *LibpodCommitContainerParams, opts ...ClientOption) (*LibpodCommitContainerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodCommitContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodCommitContainer",
		Method:             "POST",
		PathPattern:        "/libpod/commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodCommitContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodCommitContainerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodCommitContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodContainerExists checks if container exists

  Quick way to determine if a container exists by name or ID
*/
func (a *Client) LibpodContainerExists(params *LibpodContainerExistsParams, opts ...ClientOption) (*LibpodContainerExistsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodContainerExistsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodContainerExists",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/exists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodContainerExistsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodContainerExistsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodContainerExists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodCreateContainer creates a container
*/
func (a *Client) LibpodCreateContainer(params *LibpodCreateContainerParams, opts ...ClientOption) (*LibpodCreateContainerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodCreateContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodCreateContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodCreateContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodCreateContainerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodCreateContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodExportContainer exports a container

  Export the contents of a container as a tarball.
*/
func (a *Client) LibpodExportContainer(params *LibpodExportContainerParams, opts ...ClientOption) (*LibpodExportContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodExportContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodExportContainer",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodExportContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodExportContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodExportContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodGenerateKube generates a kubernetes y a m l file

  Generate Kubernetes YAML based on a pod or container.
*/
func (a *Client) LibpodGenerateKube(params *LibpodGenerateKubeParams, writer io.Writer, opts ...ClientOption) (*LibpodGenerateKubeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodGenerateKubeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodGenerateKube",
		Method:             "GET",
		PathPattern:        "/libpod/generate/{name:.*}/kube",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodGenerateKubeReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodGenerateKubeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodGenerateKube: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodGetContainer inspects container

  Return low-level information about a container.
*/
func (a *Client) LibpodGetContainer(params *LibpodGetContainerParams, opts ...ClientOption) (*LibpodGetContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodGetContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodGetContainer",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodGetContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodGetContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodGetContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodInitContainer initializes a container

  Performs all tasks necessary for initializing the container but does not start the container.
*/
func (a *Client) LibpodInitContainer(params *LibpodInitContainerParams, opts ...ClientOption) (*LibpodInitContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodInitContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodInitContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/init",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodInitContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodInitContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodInitContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodKillContainer kills container

  send a signal to a container, defaults to killing the container
*/
func (a *Client) LibpodKillContainer(params *LibpodKillContainerParams, opts ...ClientOption) (*LibpodKillContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodKillContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodKillContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/kill",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodKillContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodKillContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodKillContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodListContainers lists containers

  Returns a list of containers
*/
func (a *Client) LibpodListContainers(params *LibpodListContainersParams, opts ...ClientOption) (*LibpodListContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodListContainersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodListContainers",
		Method:             "GET",
		PathPattern:        "/libpod/containers/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodListContainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodListContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodListContainers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodLogsFromContainer gets container logs

  Get stdout and stderr logs from a container.
*/
func (a *Client) LibpodLogsFromContainer(params *LibpodLogsFromContainerParams, writer io.Writer, opts ...ClientOption) (*LibpodLogsFromContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodLogsFromContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodLogsFromContainer",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodLogsFromContainerReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodLogsFromContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodLogsFromContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodMountContainer mounts a container

  Mount a container to the filesystem
*/
func (a *Client) LibpodMountContainer(params *LibpodMountContainerParams, opts ...ClientOption) (*LibpodMountContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodMountContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodMountContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/mount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodMountContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodMountContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodMountContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodPauseContainer pauses a container

  Use the cgroups freezer to suspend all processes in a container.
*/
func (a *Client) LibpodPauseContainer(params *LibpodPauseContainerParams, opts ...ClientOption) (*LibpodPauseContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodPauseContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodPauseContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodPauseContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodPauseContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodPauseContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodPlayKube plays a kubernetes y a m l file

  Create and run pods based on a Kubernetes YAML file (pod or service kind).
*/
func (a *Client) LibpodPlayKube(params *LibpodPlayKubeParams, opts ...ClientOption) (*LibpodPlayKubeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodPlayKubeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodPlayKube",
		Method:             "POST",
		PathPattern:        "/libpod/play/kube",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodPlayKubeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodPlayKubeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodPlayKube: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodPruneContainers deletes stopped containers

  Remove containers not in use
*/
func (a *Client) LibpodPruneContainers(params *LibpodPruneContainersParams, opts ...ClientOption) (*LibpodPruneContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodPruneContainersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodPruneContainers",
		Method:             "POST",
		PathPattern:        "/libpod/containers/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodPruneContainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodPruneContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodPruneContainers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodPutArchive copies files into a container

  Copy a tar archive of files into a container
*/
func (a *Client) LibpodPutArchive(params *LibpodPutArchiveParams, opts ...ClientOption) (*LibpodPutArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodPutArchiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodPutArchive",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodPutArchiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodPutArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodPutArchive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodRemoveContainer deletes container

  Delete container
*/
func (a *Client) LibpodRemoveContainer(params *LibpodRemoveContainerParams, opts ...ClientOption) (*LibpodRemoveContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodRemoveContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodRemoveContainer",
		Method:             "DELETE",
		PathPattern:        "/libpod/containers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodRemoveContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodRemoveContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodRemoveContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodResizeContainer resizes a container s t t y

  Resize the terminal attached to a container (for use with Attach).
*/
func (a *Client) LibpodResizeContainer(params *LibpodResizeContainerParams, opts ...ClientOption) (*LibpodResizeContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodResizeContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodResizeContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/resize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodResizeContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodResizeContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodResizeContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodRestartContainer restarts a container
*/
func (a *Client) LibpodRestartContainer(params *LibpodRestartContainerParams, opts ...ClientOption) (*LibpodRestartContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodRestartContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodRestartContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodRestartContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodRestartContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodRestartContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodRestoreContainer restores a container

  Restore a container from a checkpoint.
*/
func (a *Client) LibpodRestoreContainer(params *LibpodRestoreContainerParams, opts ...ClientOption) (*LibpodRestoreContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodRestoreContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodRestoreContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodRestoreContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodRestoreContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodRestoreContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodRunHealthCheck runs a container s healthcheck

  Execute the defined healthcheck and return information about the results
*/
func (a *Client) LibpodRunHealthCheck(params *LibpodRunHealthCheckParams, opts ...ClientOption) (*LibpodRunHealthCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodRunHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodRunHealthCheck",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name:.*}/healthcheck",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodRunHealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodRunHealthCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodRunHealthCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodShowMountedContainers shows mounted containers

  Lists all mounted containers mount points
*/
func (a *Client) LibpodShowMountedContainers(params *LibpodShowMountedContainersParams, opts ...ClientOption) (*LibpodShowMountedContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodShowMountedContainersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodShowMountedContainers",
		Method:             "GET",
		PathPattern:        "/libpod/containers/showmounted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodShowMountedContainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodShowMountedContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodShowMountedContainers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodStartContainer starts a container
*/
func (a *Client) LibpodStartContainer(params *LibpodStartContainerParams, opts ...ClientOption) (*LibpodStartContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodStartContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodStartContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodStartContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodStartContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodStartContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodStatsContainer gets stats for a container

  This returns a live stream of a container’s resource usage statistics.
*/
func (a *Client) LibpodStatsContainer(params *LibpodStatsContainerParams, opts ...ClientOption) (*LibpodStatsContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodStatsContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodStatsContainer",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodStatsContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodStatsContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodStatsContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodStopContainer stops a container
*/
func (a *Client) LibpodStopContainer(params *LibpodStopContainerParams, opts ...ClientOption) (*LibpodStopContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodStopContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodStopContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodStopContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodStopContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodStopContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodTopContainer lists processes

  List processes running inside a container
*/
func (a *Client) LibpodTopContainer(params *LibpodTopContainerParams, opts ...ClientOption) (*LibpodTopContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodTopContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodTopContainer",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodTopContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodTopContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodTopContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodUnmountContainer unmounts a container

  Unmount a container from the filesystem
*/
func (a *Client) LibpodUnmountContainer(params *LibpodUnmountContainerParams, opts ...ClientOption) (*LibpodUnmountContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodUnmountContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodUnmountContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/unmount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodUnmountContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodUnmountContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodUnmountContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodUnpauseContainer unpauses container
*/
func (a *Client) LibpodUnpauseContainer(params *LibpodUnpauseContainerParams, opts ...ClientOption) (*LibpodUnpauseContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodUnpauseContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodUnpauseContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/unpause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodUnpauseContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodUnpauseContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodUnpauseContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodWaitContainer waits on a container

  Wait on a container to met a given condition
*/
func (a *Client) LibpodWaitContainer(params *LibpodWaitContainerParams, opts ...ClientOption) (*LibpodWaitContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodWaitContainerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "libpodWaitContainer",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/wait",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodWaitContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodWaitContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodWaitContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

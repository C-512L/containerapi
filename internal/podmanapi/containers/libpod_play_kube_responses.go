// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LibpodPlayKubeReader is a Reader for the LibpodPlayKube structure.
type LibpodPlayKubeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LibpodPlayKubeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLibpodPlayKubeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewLibpodPlayKubeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLibpodPlayKubeOK creates a LibpodPlayKubeOK with default headers values
func NewLibpodPlayKubeOK() *LibpodPlayKubeOK {
	return &LibpodPlayKubeOK{}
}

/* LibpodPlayKubeOK describes a response with status code 200, with default header values.

PlayKube response
*/
type LibpodPlayKubeOK struct {
	Payload *LibpodPlayKubeOKBody
}

func (o *LibpodPlayKubeOK) Error() string {
	return fmt.Sprintf("[POST /libpod/play/kube][%d] libpodPlayKubeOK  %+v", 200, o.Payload)
}
func (o *LibpodPlayKubeOK) GetPayload() *LibpodPlayKubeOKBody {
	return o.Payload
}

func (o *LibpodPlayKubeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodPlayKubeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibpodPlayKubeInternalServerError creates a LibpodPlayKubeInternalServerError with default headers values
func NewLibpodPlayKubeInternalServerError() *LibpodPlayKubeInternalServerError {
	return &LibpodPlayKubeInternalServerError{}
}

/* LibpodPlayKubeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type LibpodPlayKubeInternalServerError struct {
	Payload *LibpodPlayKubeInternalServerErrorBody
}

func (o *LibpodPlayKubeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /libpod/play/kube][%d] libpodPlayKubeInternalServerError  %+v", 500, o.Payload)
}
func (o *LibpodPlayKubeInternalServerError) GetPayload() *LibpodPlayKubeInternalServerErrorBody {
	return o.Payload
}

func (o *LibpodPlayKubeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodPlayKubeInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LibpodPlayKubeInternalServerErrorBody libpod play kube internal server error body
swagger:model LibpodPlayKubeInternalServerErrorBody
*/
type LibpodPlayKubeInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod play kube internal server error body
func (o *LibpodPlayKubeInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod play kube internal server error body based on context it is used
func (o *LibpodPlayKubeInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodPlayKubeInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodPlayKubeInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res LibpodPlayKubeInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodPlayKubeOKBody PlayKubeReport contains the results of running play kube.
swagger:model LibpodPlayKubeOKBody
*/
type LibpodPlayKubeOKBody struct {

	// Pods - pods created by play kube.
	Pods []*LibpodPlayKubeOKBodyPodsItems0 `json:"Pods"`
}

// Validate validates this libpod play kube o k body
func (o *LibpodPlayKubeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LibpodPlayKubeOKBody) validatePods(formats strfmt.Registry) error {
	if swag.IsZero(o.Pods) { // not required
		return nil
	}

	for i := 0; i < len(o.Pods); i++ {
		if swag.IsZero(o.Pods[i]) { // not required
			continue
		}

		if o.Pods[i] != nil {
			if err := o.Pods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("libpodPlayKubeOK" + "." + "Pods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this libpod play kube o k body based on the context it is used
func (o *LibpodPlayKubeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LibpodPlayKubeOKBody) contextValidatePods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Pods); i++ {

		if o.Pods[i] != nil {
			if err := o.Pods[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("libpodPlayKubeOK" + "." + "Pods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *LibpodPlayKubeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodPlayKubeOKBody) UnmarshalBinary(b []byte) error {
	var res LibpodPlayKubeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodPlayKubeOKBodyPodsItems0 PlayKubePod represents a single pod and associated containers created by play kube
swagger:model LibpodPlayKubeOKBodyPodsItems0
*/
type LibpodPlayKubeOKBodyPodsItems0 struct {

	// Containers - the IDs of the containers running in the created pod.
	Containers []string `json:"Containers"`

	// ID - ID of the pod created as a result of play kube.
	ID string `json:"ID,omitempty"`

	// Logs - non-fatal erros and log messages while processing.
	Logs []string `json:"Logs"`
}

// Validate validates this libpod play kube o k body pods items0
func (o *LibpodPlayKubeOKBodyPodsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod play kube o k body pods items0 based on context it is used
func (o *LibpodPlayKubeOKBodyPodsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodPlayKubeOKBodyPodsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodPlayKubeOKBodyPodsItems0) UnmarshalBinary(b []byte) error {
	var res LibpodPlayKubeOKBodyPodsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
